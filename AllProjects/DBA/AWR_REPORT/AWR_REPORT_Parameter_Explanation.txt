some good links

http://www.hoopoes.com/cs/orca_oracle.shtml

http://www.dbasupport.com/forums/showthread.php?t=48406-parsing

Buffer Nowait%==>

is the percentage of requests
a server process makes for a specific buffer
where the buffer was available immediately

BUFFER HIT% =>The Data Buffer Hit Ratio Oracle 
metric is a measure of the effectiveness of 
the Oracle data block buffer. 
The higher the buffer hit ratio, 
the more frequently Oracle found a 
data block in memory and avoid a disk I/O. 

"The Library Hit Ratio=>
 Oracle metric is also known as the library cache hit ratio.
 The ratio indicates the number of pin requests 
which result in pin hits. 
A pin hit occurs when the SQL or PL/SQL code you wish
 to execute is already in the library cache and is valid to execute.





Execute to parse ratio=>

is a measure of how many times you execute a sql statement versus parse it.
This 'ratio' will go towards 100 as the number of executes goes up and up and up, while the number of parses remains the same.
This will go to zero as the number of parses and executes are equal.
This will go negative if you parse more than you execute.



% Non-Parse CPU: Shows the percentage of how much CPU resources were spent on the actual SQL execution.

 
In this case, % Non-Parse CPU statistic is about 97 percent, which is quite high.  This indicates Oracle utilizes the CPU mostly for statement execution but not for parsing.


Parse CPU to Parse Elapsed=>

Gives the ratio of CPU time spent to parse SQL statements.
“The Parse CPU to Parse Elapsd metric shows how much time the CPU is spending parsing SQL statements.
 The lower this metric is, the better. 
In the following example [not quoted], it is about 2%, 
which is very low. If this metric ever gets to 5%, 
it may mean investigation is warranted to determine why the CPU is spending this much time simply parsing SQL statements.

Calculation:parse time cpu/parse time elapsed


	
The % SQL with executions>1 statistic indicates how many SQL statements are executed more than one time. 
This measures how well production applications are tuned and how well they make use of bind variables


In this example, the Memory Usage % statistic shows that almost all, approximately 92 percent, of the shared pool memory is consumed. 
This could indicate that the system experiences some overhead while aging out old shared memory structures like cursors,
 PL/SQL programs, and so on. This places additional overhead on the CPU to perform reparsing aging-out.
 The size of the shared pool should be increased appropriately to eliminate such overhead. In general, 
this statistic should be near 70 percent after the database has been running a long time. If it is quite low, memory is being wasted.



very good link to explain about cpu parse and non cpu parse

http://www.dba-oracle.com/oracle10g_tuning/t_instance_efficiency_percentage.htm


The Latch Hit Ratio Oracle metric is the ratio of the total number of latch misses to the number 
of latch gets for all latches. A low value for this ratio indicates a latching problem, whereas
 a high value is generally good. However, as the data is rolled up over all latches, a high latch hit
 ratio can artificially mask a low get rate on a specific latch. Oracle tuning professionals will 
cross-check this value with the top 5 wait events to see if latch free is in the list, and refer
 to the latch sections of the report.


-----

direct path read and direct path read temp
When a session is reading buffers from disk directly into the PGA (opposed to the buffer cache in SGA), it waits on this event. If the I/O subsystem does not support asynchronous I/Os,
 then each wait corresponds to a physical read request.
If the I/O subsystem supports asynchronous I/O, then the process is able to overlap issuing read requests 
with processing the blocks already existing in the PGA. When the process attempts to access a block in the PGA that
 has not yet been read from disk, it then issues a wait call and updates the statistics for this event. Hence, the number 
of waits is not necessarily the same as the number of read requests (unlike db file scattered read and db file sequential read).




The direct path read temp wait is most often encountered when the PGA is not able 
to support the size of the sorts. 
 The closely related wait events of direct path read,
 direct path write temp, and direct path write can occur due to parallel operations,
 direct path inserts and overloaded I/O.  But tuning the PGA, the I/O placement, 
 and SQL tuning can reduce or eliminate this wait. For other wait events that are 
 essential to your tuning of an Oracle instance, visit the Confio Wait Event Tips page. 
 And if you need help understanding Oracle performance or the implications of wait-time analysis,
 you might want to take an upcoming training class offered in conjunction with OraPub.


Causes
Select  * from v$pgastat;

---------------------------------------------------------------------------------------------

Top 5 Timed Events
~~~~~~~~~~~~~~~~~~                                      %
Event                       Waits      Time (s)       Ela
                                                      Time
--------------------------- ---------- -----------    ----
db file sequential read           2,598   7,146         48.54
db file scattered read           25,519   3,246         22.04
library cache load lock             673   1,363          9.26
CPU time                                  1,154          7.83
log file parallel write          19,157     837          5.68
 
Here, reads and writes constitute the majority of the total database time. In this case, we might consider increasing the RAM size of the db_cache_size to reduce disk I/O, tune the SQL to reduce disk I/O, or invest in a faster disk I/O sub-system



---------------------------------------------------------------------------------------------


Oracle DB CPU AND DB TIME:--

The DB time statistic in the v$sess_time_model view determines the total elapsed processing time spent by database for a particular session.

You will also see the DB CPU statistic in the v$sys_time_model view represents the total cumulative time spent by Oracle for all sessions’ CPU times and wait times spent for non-idle wait events. 





